import { ArweaveWrapper, Benchmark, getTag, LoggerFactory, SmartWeaveTags } from '../../..';
export class ContractDefinitionLoader {
    constructor(arweave, 
    // TODO: cache should be removed from the core layer and implemented in a wrapper of the core implementation
    cache) {
        this.arweave = arweave;
        this.cache = cache;
        this.logger = LoggerFactory.INST.create('ContractDefinitionLoader');
        this.arweaveWrapper = new ArweaveWrapper(arweave);
    }
    async load(contractTxId, evolvedSrcTxId) {
        var _a, _b, _c;
        if (!evolvedSrcTxId && ((_a = this.cache) === null || _a === void 0 ? void 0 : _a.contains(contractTxId))) {
            this.logger.debug('ContractDefinitionLoader: Hit from cache!');
            return Promise.resolve((_b = this.cache) === null || _b === void 0 ? void 0 : _b.get(contractTxId));
        }
        const benchmark = Benchmark.measure();
        const contract = await this.doLoad(contractTxId, evolvedSrcTxId);
        this.logger.info(`Contract definition loaded in: ${benchmark.elapsed()}`);
        (_c = this.cache) === null || _c === void 0 ? void 0 : _c.put(contractTxId, contract);
        return contract;
    }
    async doLoad(contractTxId, forcedSrcTxId) {
        const benchmark = Benchmark.measure();
        const contractTx = await this.arweaveWrapper.tx(contractTxId);
        const owner = await this.arweave.wallets.ownerToAddress(contractTx.owner);
        this.logger.debug('Contract tx and owner', benchmark.elapsed());
        benchmark.reset();
        const contractSrcTxId = forcedSrcTxId ? forcedSrcTxId : getTag(contractTx, SmartWeaveTags.CONTRACT_SRC_TX_ID);
        const minFee = getTag(contractTx, SmartWeaveTags.MIN_FEE);
        this.logger.debug('Tags decoding', benchmark.elapsed());
        benchmark.reset();
        const src = await this.arweaveWrapper.txData(contractSrcTxId);
        this.logger.debug('Contract src tx load', benchmark.elapsed());
        benchmark.reset();
        const initState = JSON.parse(await this.evalInitialState(contractTx));
        this.logger.debug('Parsing src and init state', benchmark.elapsed());
        return {
            txId: contractTxId,
            srcTxId: contractSrcTxId,
            src,
            initState,
            minFee,
            owner
        };
    }
    async evalInitialState(contractTx) {
        if (getTag(contractTx, SmartWeaveTags.INIT_STATE)) {
            return getTag(contractTx, SmartWeaveTags.INIT_STATE);
        }
        else if (getTag(contractTx, SmartWeaveTags.INIT_STATE_TX)) {
            const stateTX = getTag(contractTx, SmartWeaveTags.INIT_STATE_TX);
            return this.arweaveWrapper.txData(stateTX);
        }
        else {
            return this.arweaveWrapper.txData(contractTx.id);
        }
    }
}
//# sourceMappingURL=ContractDefinitionLoader.js.map